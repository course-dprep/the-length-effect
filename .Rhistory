knitr::opts_chunk$set(echo = TRUE)
summary(cars)
library(data.table)
library(readr)
install.packages('R.utils')
# Load IMDb title.basics data
basics <- fread("https://datasets.imdbws.com/title.basics.tsv.gz")
title.basics <- basics
# Load IMDb title.ratings data
title.ratings <- fread("https://datasets.imdbws.com/title.ratings.tsv.gz")
str(title.ratings)
# Summary of title.basics
dim(title.basics)
nrow(title.basics)
ncol(title.basics)
colnames(title.basics)
str(title.basics)
summary(title.basics)
head(title.basics, 10)
# Summary of title.ratings
dim(title.ratings)
nrow(title.ratings)
ncol(title.ratings)
colnames(title.ratings)
str(title.ratings)
summary(title.ratings)
head(title.ratings, 10)
# Variable table:
install.packages(gt)
library(dplyr)
library(gt)
var_dict <- tribble(
~Variable,        ~Type,      ~Definition,                                                        ~Role,
"runtimeMinutes", "integer",  "Duration of the movie in minutes",                                 "Independent variable",
"averageRating",  "double",   "Average IMDb user rating (0â€“10 scale, aggregated from user votes)", "Dependent variable",
"startYear",      "integer",  "Year the movie was released",                                      "Control variable")
var_dict %>%
gt() %>%
tab_header(title = "Table 1. Variable Explanation") %>%
tab_options(column_labels.font.weight = "bold")
# Descriptive Statistics table:
library(dplyr)
library(gt)
data_final <- title.basics %>%
select(tconst, runtimeMinutes, startYear) %>%
mutate(
runtimeMinutes = suppressWarnings(as.numeric(runtimeMinutes)),
startYear      = suppressWarnings(as.integer(startYear))
) %>%
inner_join(
title.ratings %>% select(tconst, averageRating),
by = "tconst"
) %>%
mutate(averageRating = as.numeric(averageRating))
descriptives <- tibble(
Variable = c("runtimeMinutes","averageRating","startYear"),
N        = c(sum(!is.na(data_final$runtimeMinutes)),
sum(!is.na(data_final$averageRating)),
sum(!is.na(data_final$startYear))),
Missing  = c(sum(is.na(data_final$runtimeMinutes)),
sum(is.na(data_final$averageRating)),
sum(is.na(data_final$startYear))),
Mean     = c(mean(data_final$runtimeMinutes, na.rm = TRUE),
mean(data_final$averageRating,  na.rm = TRUE),
mean(data_final$startYear,      na.rm = TRUE)),
SD       = c(sd(data_final$runtimeMinutes, na.rm = TRUE),
sd(data_final$averageRating,  na.rm = TRUE),
sd(data_final$startYear,      na.rm = TRUE)),
Min      = c(min(data_final$runtimeMinutes, na.rm = TRUE),
min(data_final$averageRating,  na.rm = TRUE),
min(data_final$startYear,      na.rm = TRUE)),
Max      = c(max(data_final$runtimeMinutes, na.rm = TRUE),
max(data_final$averageRating,  na.rm = TRUE),
max(data_final$startYear,      na.rm = TRUE)))
descriptives %>%
gt() %>%
tab_header(title = "Table 2. Descriptive Statistics") %>%
tab_options(column_labels.font.weight="bold")
# Data preparation p. 23
library(dplyr)
current_year <- 2025
max_runtime  <- 300  # 5 hours
# helper to normalize IMDb missing markers
to_na <- function(x) {
y <- as.character(x)
y[y %in% c("\\N", "N", "")] <- NA_character_
y
}
# --- basics: keep only what we need + clean ---
title.basics_clean <- title.basics %>%
mutate(
titleType      = to_na(titleType),
primaryTitle   = to_na(primaryTitle),
startYear      = to_na(startYear),
runtimeMinutes = to_na(runtimeMinutes)) %>%
mutate(
startYear      = suppressWarnings(as.integer(startYear)),
runtimeMinutes = suppressWarnings(as.numeric(runtimeMinutes))) %>%
filter(titleType == "movie") %>%                # keep only movies
select(tconst, primaryTitle, startYear, runtimeMinutes) %>%
distinct(tconst, .keep_all = TRUE)
# --- ratings: only needed cols + clean ---
title.ratings_clean <- title.ratings %>%
mutate(
averageRating = to_na(averageRating),
numVotes      = to_na(numVotes)) %>%
mutate(averageRating = as.numeric(averageRating),
numVotes      = as.integer(numVotes)) %>%
select(tconst, averageRating, numVotes) %>%
distinct(tconst, .keep_all = TRUE)
# --- join + enforce your rules ---
movies_final <- title.basics_clean %>%
inner_join(title.ratings_clean, by = "tconst") %>%
# drop missing in variables of interest
filter(!is.na(runtimeMinutes),
!is.na(averageRating),
!is.na(startYear)) %>%
# drop 0-min and > 300-min
filter(runtimeMinutes > 0,
runtimeMinutes <= max_runtime) %>%
# drop future years (> 2025)
filter(startYear <= current_year) %>%
# tidy names for analysis
rename(
title           = primaryTitle,
start_year      = startYear,
runtime_minutes = runtimeMinutes,
average_rating  = averageRating,
votes           = numVotes)
# (optional) quick check
list(
n_rows = nrow(movies_final),
min_runtime = min(movies_final$runtime_minutes),
max_runtime = max(movies_final$runtime_minutes),
min_year = min(movies_final$start_year),
max_year = max(movies_final$start_year),
any_na = anyNA(movies_final[, c("runtime_minutes","average_rating","start_year")]))
# --- Post-cleaning: demonstrate data.table on movies_final ---
library(data.table)
# convert once
movies_dt <- as.data.table(movies_final)   # cols: start_year, runtime_minutes, average_rating, votes, title...
# 1) Yearly summary (fast groupby)
yearly_dt <- movies_dt[
, .(
n_movies    = .N,
avg_runtime = mean(runtime_minutes),
avg_rating  = mean(average_rating),
med_votes   = median(votes)
),
by = start_year
][order(start_year)]
# 2) Runtime buckets + weighted mean rating (by votes)
movies_dt[
, runtime_bin := cut(runtime_minutes, breaks = c(1, 90, 120, 150, 180, 300),
right = TRUE, include.lowest = TRUE)
]
runtime_summary_dt <- movies_dt[
, .(
n = .N,
wmean_rating = weighted.mean(average_rating, w = pmax(votes, 1))
),
by = runtime_bin
][order(runtime_bin)]
# 3) (Optional) set a key for fast joins/filters in later steps
setkey(movies_dt, start_year)
# preview (use either print or head)
head(yearly_dt)
head(runtime_summary_dt)
tail(yearly_dt)
tail(runtime_summary_dt)
movies_enriched <- movies_final %>%
mutate (
title_clean  = str_squish(str_remove(title, "\\s*\\((TV|Video|V)\\)$")),
runtime_bin  = cut(runtime_minutes,
breaks = c(1, 90, 120, 150, 180, 300),
include.lowest = TRUE, right = TRUE)
)
rlang::last_trace()
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
library(data.table)
library(readr)
install.packages('R.utils')
# Load IMDb title.basics data
basics <- fread("https://datasets.imdbws.com/title.basics.tsv.gz")
getwd()
knitr::opts_chunk$set(
echo    = FALSE,   # hide code unless you explicitly set echo=TRUE
message = FALSE,
warning = FALSE,
fig.align = "center",
fig.width = 7, fig.height = 4, dpi = 180
)
options(tidyverse.quiet = TRUE)
need_pkgs <- c(
"tidyverse","data.table","readr","lubridate","ISOweek","zoo",
"knitr","kableExtra","broom","gt","janitor"
)
missing <- setdiff(need_pkgs, rownames(installed.packages()))
if (length(missing)) stop(
sprintf("Please install missing packages before knitting: %s",
paste(missing, collapse=", "))
)
---
title: "Deliverable 2"
---
title: "Deliverable 4"
---
title: "Deliverable 1"
---
title: "Deliverable 1"
---
title: "Deliverable 1"
---
title: "Deliverable 4"
---
title: "Deliverable 4"
---
title: "Deliverable 4"
---
title: "Deliverable 4"
library(readr)
library(data.table)
setwd("C:/BILYANA/TiU/MA/Intro to Research Mkt/")
sat <- read_csv("sat.csv")
setDT(sat)
View(sat)
summary(sat)
sat[, child := num.child>0]
sat_lm4 <- lm(overall ~ child*wait, sat); summary(sat_lm4)
sat[, mwait := wait-mean(wait)]
sat_lm5 <- lm(overall ~ child*mwait, sat); summary(sat_lm5)
cust <- read_csv("cust.csv")
setDT(cust)
View(cust)
summary(cusr)
summary(cust)
set.seed(55)
cust <- cust[sample.int(nrow(cust), 2250), ]
cust[, mage := age - mean(age, na.rm = TRUE)]
lm2 <- lm(online.visits ~ email * mage, data = cust)
summary(lm2)
sd_age <- sd(cust$age, na.rm = TRUE)
cust[, lndist := log(distance.to.store)]
lm3 <- lm(store.trans ~ lndist, data = cust)
summary(lm3)
beta1 <- coef(lm3)["lndist"]
effect <- 0.02 * beta1
effect
