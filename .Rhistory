y = "Total number of reviews",
title = "Effect of COVID-19 pandemic on Airbnb review count",
color = "Neighborhood"
) +
scale_color_manual(values = c("Stadspark" = "red",
"Sint-Andries" = "blue",
"Centraal Station" = "green")) +
theme_minimal()
dev.off()
# PLOT ALL
## import the data from `gen/data-preparation/aggregated_df.csv`
df <- read_csv("aggregated_df.csv")
## group by date and calculate the sum of all reviews across neighbourhoods.
df_groupby <- df %>% group_by(date) %>% summarise(num_reviews = sum(num_reviews))
## plot the chart and store the visualisation.
pdf("plot_all.pdf")
ggplot(df_groupby, aes(x = date, y = num_reviews)) +
geom_line(color = "black", size = 1) +
labs(
x = "",
y = "Total number of reviews",
title = "Effect of COVID-19 pandemic on Airbnb review count"
) +
theme_minimal()
dev.off()
# Load packages
library(tidyverse)
library(ggplot2)
# DOWNLOAD DATA
## Function to download data and save as CSV
download_data <- function(url, filename){
download.file(url = url, destfile = paste0(filename, ".csv"))
}
url_listings <- "http://data.insideairbnb.com/belgium/vlg/antwerp/2021-02-25/visualisations/listings.csv"
url_reviews <- "http://data.insideairbnb.com/belgium/vlg/antwerp/2021-02-25/visualisations/reviews.csv"
download_data(url_listings, "listings")
download_data(url_reviews, "reviews")
# CLEAN DATA
reviews <- read_csv("reviews.csv")
listings <- read_csv("listings.csv")
## filter for reviews published since 01/01/2015
reviews_filtered <- reviews %>% filter(date > "2015-01-01")
## filter for `listings` that have received at least 1 review.
listings_filtered <- listings %>% filter(number_of_reviews > 1)
## merge the `reviews` and `listings` dataframes on a common columns (the type of join doesn't really matter since we already filtered out listings without any reviews)
df_merged <- reviews_filtered %>% inner_join(listings_filtered, by = c("listing_id" = "id"))
## group the number of reviews by month and neighborhood.
df_grouped <- df_merged %>%
mutate(month = format(date, "%m"), year = format(date, "%Y")) %>%
group_by(year, month, neighbourhood) %>%
summarise(num_reviews = n())
## create date column
df_grouped <- df_grouped %>% mutate(date = as.Date(paste0(year, "-", month, "-01")))
## store the final data frame in `gen/data-preparation` as `aggregated_df.csv`
write_csv(df_grouped, "aggregated_df.csv")
# CREATE PIVOT TABLE
## import the data from `gen/data-preparation/aggregated_df.csv`
df <- read_csv("aggregated_df.csv")
## create pivot table
df_pivot <- df %>%  pivot_wider(id_cols=date, names_from = neighbourhood, values_from = num_reviews)
## export results
write_csv(df_pivot, "pivot_table.csv")
# PLOT ANTWERP
## import the data from `gen/analysis/pivot_table`
df_pivot <- read_csv("pivot_table.csv")
pdf("plot_Antwerp.pdf")
library(tidyverse)
df_pivot <- read_csv("pivot_table.csv")
pdf("plot_Antwerp.pdf")
ggplot(df_pivot, aes(x = date)) +
geom_line(aes(y = Universiteitsbuurt, color = "Universiteitsbuurt"), linewidth = 1) +
geom_line(aes(y = `Sint-Andries`, color = "Sint-Andries"), linewidth = 1) +
geom_line(aes(y = `Centraal Station`, color = "Centraal Station"), linewidth = 1) +
labs(
x = "",
y = "Total number of reviews",
title = "Effect of COVID-19 pandemic on Airbnb review count",
color = "Neighborhood"
) +
scale_color_manual(values = c("Universiteitsbuurt" = "red",
"Sint-Andries" = "blue",
"Centraal Station" = "green")) +
theme_minimal()
dev.off()
# PLOT ALL
## import the data from `gen/data-preparation/aggregated_df.csv`
df <- read_csv("aggregated_df.csv")
## group by date and calculate the sum of all reviews across neighbourhoods.
df_groupby <- df %>% group_by(date) %>% summarise(num_reviews = sum(num_reviews))
## plot the chart and store the visualisation.
pdf("plot_all.pdf")
ggplot(df_groupby, aes(x = date, y = num_reviews)) +
geom_line(color = "black", size = 1) +
labs(
x = "",
y = "Total number of reviews",
title = "Effect of COVID-19 pandemic on Airbnb review count"
) +
theme_minimal()
dev.off()
# Load packages
library(tidyverse)
library(ggplot2)
# DOWNLOAD DATA
## Function to download data and save as CSV
download_data <- function(url, filename){
download.file(url = url, destfile = paste0(filename, ".csv"))
}
url_listings <- "http://data.insideairbnb.com/belgium/vlg/antwerp/2021-02-25/visualisations/listings.csv"
url_reviews <- "http://data.insideairbnb.com/belgium/vlg/antwerp/2021-02-25/visualisations/reviews.csv"
download_data(url_listings, "listings")
download_data(url_reviews, "reviews")
# CLEAN DATA
reviews <- read_csv("reviews.csv")
listings <- read_csv("listings.csv")
## filter for reviews published since 01/01/2015
reviews_filtered <- reviews %>% filter(date > "2015-01-01")
## filter for `listings` that have received at least 1 review.
listings_filtered <- listings %>% filter(number_of_reviews > 1)
## merge the `reviews` and `listings` dataframes on a common columns (the type of join doesn't really matter since we already filtered out listings without any reviews)
df_merged <- reviews_filtered %>% inner_join(listings_filtered, by = c("listing_id" = "id"))
## group the number of reviews by month and neighborhood.
df_grouped <- df_merged %>%
mutate(month = format(date, "%m"), year = format(date, "%Y")) %>%
group_by(year, month, neighbourhood) %>%
summarise(num_reviews = n())
## create date column
df_grouped <- df_grouped %>% mutate(date = as.Date(paste0(year, "-", month, "-01")))
## store the final data frame in `gen/data-preparation` as `aggregated_df.csv`
write_csv(df_grouped, "aggregated_df.csv")
# CREATE PIVOT TABLE
## import the data from `gen/data-preparation/aggregated_df.csv`
df <- read_csv("aggregated_df.csv")
## create pivot table
df_pivot <- df %>%  pivot_wider(id_cols=date, names_from = neighbourhood, values_from = num_reviews)
## export results
write_csv(df_pivot, "pivot_table.csv")
# PLOT ANTWERP
## import the data from `gen/analysis/pivot_table`
df_pivot <- read_csv("pivot_table.csv")
pdf("plot_Antwerp.pdf")
library(tidyverse)
df_pivot <- read_csv("pivot_table.csv")
pdf("plot_Antwerp.pdf")
ggplot(df_pivot, aes(x = date)) +
geom_line(aes(y = Stadspark, color = "Stadspark"), linewidth = 1) +
geom_line(aes(y = `Sint-Andries`, color = "Sint-Andries"), linewidth = 1) +
geom_line(aes(y = `Centraal Station`, color = "Centraal Station"), linewidth = 1) +
labs(
x = "",
y = "Total number of reviews",
title = "Effect of COVID-19 pandemic on Airbnb review count",
color = "Neighborhood"
) +
scale_color_manual(values = c("Stadspark" = "red",
"Sint-Andries" = "blue",
"Centraal Station" = "green")) +
theme_minimal()
dev.off()
# PLOT ALL
## import the data from `gen/data-preparation/aggregated_df.csv`
df <- read_csv("aggregated_df.csv")
## group by date and calculate the sum of all reviews across neighbourhoods.
df_groupby <- df %>% group_by(date) %>% summarise(num_reviews = sum(num_reviews))
## plot the chart and store the visualisation.
pdf("plot_all.pdf")
ggplot(df_groupby, aes(x = date, y = num_reviews)) +
geom_line(color = "black", size = 1) +
labs(
x = "",
y = "Total number of reviews",
title = "Effect of COVID-19 pandemic on Airbnb review count"
) +
theme_minimal()
dev.off()
setwd("~/Documents/Master/Data Prep. Programming Skills/Team project/Tutorial 5")
---
title: "Deliverable 4"
---
title: "Deliverable 4"
knitr::opts_chunk$set(
echo    = FALSE,
message = FALSE,
warning = FALSE,
fig.align = "center",
fig.width = 7, fig.height = 4, dpi = 180
)
options(tidyverse.quiet = TRUE)
need_pkgs <- c(
"tidyverse","data.table","readr","lubridate",
"knitr","kableExtra","broom"
)
# Optional (used only if you later add those features)
opt_pkgs <- c("ISOweek","zoo","janitor","gt")
missing <- setdiff(need_pkgs, rownames(installed.packages()))
if (length(missing)) {
stop(
sprintf("Please install missing packages before knitting: %s",
paste(missing, collapse = ", "))
)
}
cust <- read.csv("cust.csv", stringsAsFactors =
cust <- read.csv("cust.csv", stringsAsFactors = FALSE)
set.seed(90)
## 2) Random sample trekken (n = 2250) --------------------------------------
set.seed(90)
cust_s <- cust[sample.int(nrow(cust), 2250), ]
cust_s <- cust.csv[sample.int(nrow(cust), 2250), ]
cust_s <- cust.csv[sample.int(nrow(cust), 2250), ]
# Benodigde code om de vraag te beantwoorden
# 1) Data inlezen en sample trekken
cust <- read.csv("cust.csv", stringsAsFactors = FALSE)
# Benodigde code om de vraag te beantwoorden
# 1) Data inlezen en sample trekken
cust <- read.csv("cust.csv", stringsAsFactors = FALSE)
knitr::opts_chunk$set(
echo    = FALSE,
message = FALSE,
warning = FALSE,
fig.align = "center",
fig.width = 7, fig.height = 4, dpi = 180
)
options(tidyverse.quiet = TRUE)
need_pkgs <- c(
"tidyverse","data.table","readr","lubridate",
"knitr","kableExtra","broom"
)
install.packages("kableExtra")
# Optional (used only if you later add those features)
opt_pkgs <- c("ISOweek","zoo","janitor","gt")
missing <- setdiff(need_pkgs, rownames(installed.packages()))
if (length(missing)) {
stop(
sprintf("Please install missing packages before knitting: %s",
paste(missing, collapse = ", "))
)
}
invisible(lapply(need_pkgs, library, character.only = TRUE))
present_opt <- intersect(opt_pkgs, rownames(installed.packages()))
if (length(present_opt)) {
invisible(lapply(present_opt, library, character.only = TRUE))
}
summary(cars)
# Load IMDb title.basics data
basics <- fread("https://datasets.imdbws.com/title.basics.tsv.gz")
install.packages("kableExtra")
knitr::opts_chunk$set(
echo    = FALSE,
message = FALSE,
warning = FALSE,
fig.align = "center",
fig.width = 7, fig.height = 4, dpi = 180
)
options(tidyverse.quiet = TRUE)
need_pkgs <- c(
"tidyverse","data.table","readr","lubridate",
"knitr","kableExtra","broom"
)
install.packages("kableExtra")
# Optional (used only if you later add those features)
opt_pkgs <- c("ISOweek","zoo","janitor","gt")
missing <- setdiff(need_pkgs, rownames(installed.packages()))
if (length(missing)) {
stop(
sprintf("Please install missing packages before knitting: %s",
paste(missing, collapse = ", "))
)
}
invisible(lapply(need_pkgs, library, character.only = TRUE))
present_opt <- intersect(opt_pkgs, rownames(installed.packages()))
if (length(present_opt)) {
invisible(lapply(present_opt, library, character.only = TRUE))
}
summary(cars)
# Load IMDb title.basics data
basics <- fread("https://datasets.imdbws.com/title.basics.tsv.gz")
title.basics <- basics
# Load IMDb title.ratings data
title.ratings <- fread("https://datasets.imdbws.com/title.ratings.tsv.gz")
str(title.ratings)
# Summary of title.basics
fmt <- if (knitr::is_latex_output()) "latex" else "html"
snap <- tibble::tibble(
dataset = c("title.basics","title.ratings"),
n_rows  = c(nrow(title.basics), nrow(title.ratings)),
n_cols  = c(ncol(title.basics), ncol(title.ratings))
)
knitr::kable(snap, format = fmt, caption = "Data snapshots") |>
kableExtra::kable_styling(full_width = FALSE,
bootstrap_options = c("striped","hover","condensed"))
# Summary of title.ratings
dim(title.ratings)
nrow(title.ratings)
ncol(title.ratings)
colnames(title.ratings)
str(title.ratings)
summary(title.ratings)
head(title.ratings, 10)
# Variable table:
var_dict <- tribble(
~Variable,        ~Type,      ~Definition,                                                        ~Role,
"runtimeMinutes", "integer",  "Duration of the movie in minutes",                                 "Independent variable",
"averageRating",  "double",   "Average IMDb user rating (0–10 scale, aggregated from user votes)", "Dependent variable",
"startYear",      "integer",  "Year the movie was released",                                      "Control variable")
var_dict %>%
gt() %>%
tab_header(title = "Table 1. Variable Explanation") %>%
tab_options(column_labels.font.weight = "bold")
# Descriptive Statistics table:
data_final <- title.basics %>%
select(tconst, runtimeMinutes, startYear) %>%
mutate(
runtimeMinutes = suppressWarnings(as.numeric(runtimeMinutes)),
startYear      = suppressWarnings(as.integer(startYear))
) %>%
inner_join(
title.ratings %>% select(tconst, averageRating),
by = "tconst"
) %>%
mutate(averageRating = as.numeric(averageRating))
descriptives <- tibble(
Variable = c("runtimeMinutes","averageRating","startYear"),
N        = c(sum(!is.na(data_final$runtimeMinutes)),
sum(!is.na(data_final$averageRating)),
sum(!is.na(data_final$startYear))),
Missing  = c(sum(is.na(data_final$runtimeMinutes)),
sum(is.na(data_final$averageRating)),
sum(is.na(data_final$startYear))),
Mean     = c(mean(data_final$runtimeMinutes, na.rm = TRUE),
mean(data_final$averageRating,  na.rm = TRUE),
mean(data_final$startYear,      na.rm = TRUE)),
SD       = c(sd(data_final$runtimeMinutes, na.rm = TRUE),
sd(data_final$averageRating,  na.rm = TRUE),
sd(data_final$startYear,      na.rm = TRUE)),
Min      = c(min(data_final$runtimeMinutes, na.rm = TRUE),
min(data_final$averageRating,  na.rm = TRUE),
min(data_final$startYear,      na.rm = TRUE)),
Max      = c(max(data_final$runtimeMinutes, na.rm = TRUE),
max(data_final$averageRating,  na.rm = TRUE),
max(data_final$startYear,      na.rm = TRUE)))
descriptives %>%
gt() %>%
tab_header(title = "Table 2. Descriptive Statistics") %>%
tab_options(column_labels.font.weight="bold")
# Data preparation point 2.2
current_year <- 2025
max_runtime  <- 300
to_na <- function(x) {
y <- as.character(x)
y[y %in% c("\\N", "N", "")] <- NA_character_
y
}
title.basics_clean <- title.basics %>%
mutate(
titleType      = to_na(titleType),
primaryTitle   = to_na(primaryTitle),
startYear      = to_na(startYear),
runtimeMinutes = to_na(runtimeMinutes)) %>%
mutate(
startYear      = suppressWarnings(as.integer(startYear)),
runtimeMinutes = suppressWarnings(as.numeric(runtimeMinutes))) %>%
filter(titleType == "movie") %>%
select(tconst, primaryTitle, startYear, runtimeMinutes) %>%
distinct(tconst, .keep_all = TRUE)
title.ratings_clean <- title.ratings %>%
mutate(
averageRating = to_na(averageRating),
numVotes      = to_na(numVotes)) %>%
mutate(averageRating = as.numeric(averageRating),
numVotes      = as.integer(numVotes)) %>%
select(tconst, averageRating, numVotes) %>%
distinct(tconst, .keep_all = TRUE)
movies_final <- title.basics_clean %>%
inner_join(title.ratings_clean, by = "tconst") %>%
filter(!is.na(runtimeMinutes),
!is.na(averageRating),
!is.na(startYear)) %>%
filter(runtimeMinutes > 0,
runtimeMinutes <= max_runtime) %>%
filter(startYear <= current_year) %>%
rename(
title           = primaryTitle,
start_year      = startYear,
runtime_minutes = runtimeMinutes,
average_rating  = averageRating,
votes           = numVotes)
list(
n_rows = nrow(movies_final),
min_runtime = min(movies_final$runtime_minutes),
max_runtime = max(movies_final$runtime_minutes),
min_year = min(movies_final$start_year),
max_year = max(movies_final$start_year),
any_na = anyNA(movies_final[, c("runtime_minutes","average_rating","start_year")]))
fmt <- if (knitr::is_latex_output()) "latex" else "html"
tibble(
metric = c("rows","min_runtime","max_runtime","min_year","max_year","any_na"),
value  = c(nrow(movies_final),
min(movies_final$runtime_minutes),
max(movies_final$runtime_minutes),
min(movies_final$start_year),
max(movies_final$start_year),
anyNA(movies_final[, c("runtime_minutes","average_rating","start_year")]))
) |>
knitr::kable(format = fmt, caption = "Quick data checks") |>
kableExtra::kable_styling(full_width = FALSE)
movies_dt <- as.data.table(movies_final)
yearly_dt <- movies_dt[
, .(
n_movies    = .N,
avg_runtime = mean(runtime_minutes),
avg_rating  = mean(average_rating),
med_votes   = median(votes)
),
by = start_year
][order(start_year)]
movies_dt[
, runtime_bin := cut(runtime_minutes, breaks = c(1, 90, 120, 150, 180, 300),
right = TRUE, include.lowest = TRUE)
]
runtime_summary_dt <- movies_dt[
, .(
n = .N,
wmean_rating = weighted.mean(average_rating, w = pmax(votes, 1))
),
by = runtime_bin
][order(runtime_bin)]
setkey(movies_dt, start_year)
fmt <- if (knitr::is_latex_output()) "latex" else "html"
cap1 <- if (knitr::is_latex_output()) "Preview: yearly\\_dt (first 10)" else "Preview: yearly_dt (first 10)"
cap2 <- if (knitr::is_latex_output()) "Preview: runtime\\_summary\\_dt (first 10)" else "Preview: runtime_summary_dt (first 10)"
knitr::kable(
head(yearly_dt, 10),
format  = fmt,
caption = cap1,
escape  = TRUE
) |>
kableExtra::kable_styling(full_width = FALSE,
bootstrap_options = c("striped","hover","condensed"))
knitr::kable(
head(runtime_summary_dt, 10),
format  = fmt,
caption = cap2,
escape  = TRUE
) |>
kableExtra::kable_styling(full_width = FALSE,
bootstrap_options = c("striped","hover","condensed"))
fmt <- if (knitr::is_latex_output()) "latex" else "html"
movies_final |>
count(start_year, name = "n_movies") |>
arrange(start_year) |>
knitr::kable(format = fmt, caption = "Number of movies by release year") |>
kableExtra::kable_styling(full_width = FALSE,
bootstrap_options = c("striped","hover","condensed"))
movies_eng <- movies_final |>
mutate(
start_year   = as.integer(start_year),
decade       = 10 * (start_year %/% 10),
runtime_bin  = cut(runtime_minutes,
breaks = c(0, 60, 90, 120, 150, Inf),
labels = c("<=60","60–90","90–120","120–150",">150"),
include.lowest = TRUE, right = TRUE),
log_votes    = log1p(votes)
)
movies_eng <- movies_eng |>
group_by(start_year) |>
mutate(
runtime_imp        = ifelse(is.na(runtime_minutes),
median(runtime_minutes, na.rm = TRUE),
runtime_minutes),
average_rating_imp = ifelse(is.na(average_rating),
median(average_rating, na.rm = TRUE),
average_rating)
) |>
ungroup()
movies_wide <- movies_eng |>
mutate(rating_bucket = cut(average_rating_imp,
breaks = c(0,4,6,7,8,10),
labels = c("<4","4–6","6–7","7–8",">=8"),
include.lowest = TRUE)) |>
count(start_year, rating_bucket, name = "n") |>
tidyr::pivot_wider(names_from = rating_bucket, values_from = n, values_fill = 0)
# Pretty preview (first 10 years)
fmt <- if (knitr::is_latex_output()) "latex" else "html"
knitr::kable(head(movies_wide, 10), format = fmt,
caption = "Movies per rating bucket by year (wide)") |>
kableExtra::kable_styling(full_width = FALSE,
bootstrap_options = c("striped","hover","condensed"))
yearly <- movies_eng |>
group_by(start_year) |>
summarise(
avg_rating  = mean(average_rating_imp, na.rm = TRUE),
avg_runtime = mean(runtime_imp, na.rm = TRUE),
n_movies    = n(),
.groups = "drop"
) |>
arrange(start_year) |>
mutate(trend = row_number())
movies_eng |>
filter(!is.na(runtime_imp), !is.na(average_rating_imp)) |>
ggplot(aes(x = runtime_imp, y = average_rating_imp)) +
geom_point(alpha = 0.3) +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Runtime vs. Rating",
x = "Runtime (minutes, imputed)",
y = "Average rating (imputed)")
mod <- lm(average_rating_imp ~ runtime_imp + factor(start_year), data = movies_eng)
broom::tidy(mod) |>
knitr::kable(format = if (knitr::is_latex_output()) "latex" else "html",
caption = "OLS: rating on runtime + year fixed effects") |>
kableExtra::kable_styling(full_width = FALSE,
bootstrap_options = c("striped","hover","condensed"))
adoption <- read.table("~/Downloads/adoption.sav", quote="\"")
