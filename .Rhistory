) %>%
arrange(desc(n))
title.basics_clean %>%
filter(titleType == "tvMovie", !is.na(runtimeMinutes), runtimeMinutes >= 40) %>%
summarise(
count = n(),
mean_runtime = mean(runtimeMinutes),
median_runtime = median(runtimeMinutes)
)
# Checking variable type
dplyr::glimpse(title.basics[, c("primaryTitle", "startYear", "runtimeMinutes")])
sapply(title.basics[, c("primaryTitle", "startYear", "runtimeMinutes")], typeof)
dplyr::glimpse(title.ratings[, "averageRating", drop = FALSE])
sapply(title.ratings[, "averageRating", drop = FALSE], typeof)
# Replace "\N" and "" with NA
to_na <- function(x) {
y <- as.character(x)
y[y %in% c("\\N", "N", "")] <- NA_character_
y
}
# Cleaning the titile.basics dataset
title.basics_clean <- title.basics %>%
mutate(across(c(titleType, primaryTitle, startYear, runtimeMinutes), to_na)) %>%
mutate(startYear = suppressWarnings(as.integer(startYear)),
runtimeMinutes = suppressWarnings(as.numeric(runtimeMinutes))) %>%
select(tconst, titleType, primaryTitle, originalTitle, isAdult,
startYear, endYear, runtimeMinutes, genres) %>%
distinct(tconst, .keep_all = TRUE)
# Cleaning the title.ratings dataset
title.ratings_clean <- title.ratings %>%
mutate(across(c(averageRating, numVotes), to_na)) %>%
mutate(averageRating = as.numeric(averageRating),
numVotes = as.integer(numVotes)) %>%
select(tconst, averageRating, numVotes) %>%
distinct(tconst, .keep_all = TRUE)
# Verification of variable types after the cleaning
dplyr::glimpse(title.basics_clean[, c("primaryTitle", "startYear", "runtimeMinutes")])
sapply(title.basics_clean[, c("primaryTitle", "startYear", "runtimeMinutes")], typeof)
dplyr::glimpse(title.ratings_clean[, "averageRating", drop = FALSE])
sapply(title.ratings_clean[, "averageRating", drop = FALSE], typeof)
# Checking missing values
colSums(is.na(title.basics_clean[, c("primaryTitle", "startYear", "runtimeMinutes")]))
colSums(is.na(title.ratings_clean[, c("averageRating", "numVotes")]))
# Variable table:
var_dict <- tribble(
~Variable,  ~Class, ~Definition, ~Role,
"runtimeMinutes", "numeric",  "Duration of the movie in minutes", "Independent variable",
"averageRating",  "numeric",   "Average IMDb user rating (0–10 scale, aggregated from user votes)", "Dependent variable",
"startYear",      "numeric",  "Year the movie was released", "Control variable")
var_dict %>%
gt() %>%
tab_header(title = "Table 1. Variable Explanation") %>%
tab_options(column_labels.font.weight = "bold")
### Checking for outliers in IMDb ratings
# Numeric summary of average ratings
summary(title.ratings_clean$averageRating)
# Histogram of rating distribution (excluding missing values)
ratings_clean <- dplyr::filter(title.ratings_clean, !is.na(averageRating))
ggplot(ratings_clean, aes(x = averageRating)) +
geom_histogram(binwidth = 0.25, color = "white", fill = "grey30", boundary = 0) +
scale_x_continuous(limits = c(0, 10), breaks = 0:10) +
labs(
x = "Average rating",
y = "Count",
title = "Distribution of IMDb Ratings"
) +
theme_minimal(base_size = 14)
# Filter for movies only (and reasonable ranges)
title.basics_filtered <- title.basics_clean %>%
filter(titleType == "movie",
runtimeMinutes >40,
runtimeMinutes <= 300,
startYear <= 2025) %>%
select(tconst, primaryTitle, startYear, runtimeMinutes) %>%
distinct(tconst, .keep_all = TRUE)
```{r Data Preparation}
title.basics_filtered <- title.basics_clean %>%
filter(
titleType %in% c("movie", "tvMovie"),
runtimeMinutes > 40,
runtimeMinutes <= 300,
startYear <= 2025
) %>%
select(tconst, primaryTitle, startYear, runtimeMinutes) %>%
distinct(tconst, .keep_all = TRUE)
# Renaming variables
title.basics_filtered <- title.basics_filtered %>%
rename(
title           = primaryTitle,
start_year      = startYear,
runtime_minutes = runtimeMinutes)
title.ratings_clean <- title.ratings_clean %>%
rename(
average_rating  = averageRating,
votes           = numVotes)
# Merging datasets
merged_data <- title.basics_filtered %>%
select(tconst, runtime_minutes, start_year, title) %>%
mutate(
runtime_minutes = (as.numeric(runtime_minutes)),
start_year      = (as.integer(start_year)),
title = (as.character(title))) %>%
inner_join(
title.ratings_clean %>% select(tconst, average_rating, votes),
by = "tconst") %>%
mutate(
average_rating = as.numeric(average_rating),
votes= as.integer(votes))
# Checking the duplicated data
keys <- c("title", "start_year", "runtime_minutes")
dup_count <- sum(duplicated(select(merged_data, all_of(keys))))
dup_count
duplicated_movies <- merged_data %>%
mutate(is_duplicate = duplicated(select(., all_of(keys))) |
duplicated(select(., all_of(keys)), fromLast = TRUE)) %>%
filter(is_duplicate) %>%
select(title, start_year, runtime_minutes, average_rating, votes) %>%
arrange(title, start_year, runtime_minutes)
# Count duplicate groups (titles that appear multiple times)
duplicate_summary <- merged_data %>%
count(across(all_of(keys)), sort = TRUE) %>%
filter(n > 1) %>% slice_head(n = 20)
duplicate_summary
# Handling Duplicates - retaining only one record per movie, the one with highest number of votes
movies_deduplicated <- merged_data %>%
group_by(across(all_of(keys))) %>%
slice_max(votes, with_ties = FALSE) %>%
ungroup()
# Verification
sum(duplicated(select(movies_deduplicated, all_of(keys))))
## Handling missing data
colSums(is.na(movies_deduplicated[, c("runtime_minutes", "average_rating", "start_year", "title")]))
summary(movies_deduplicated)
movies_final_clean <- movies_deduplicated
# Descriptive table
descriptives <- tibble(
Variable = c("runtime_minutes","average_rating","start_year"),
N        = c(sum(!is.na(movies_final_clean$runtime_minutes)),
sum(!is.na(movies_final_clean$average_rating)),
sum(!is.na(movies_final_clean$start_year))),
Missing  = c(sum(is.na(movies_final_clean$runtime_minutes)),
sum(is.na(movies_final_clean$average_rating)),
sum(is.na(movies_final_clean$start_year))),
Mean     = c(mean(movies_final_clean$runtime_minutes, na.rm = TRUE),
mean(movies_final_clean$average_rating,  na.rm = TRUE),
mean(movies_final_clean$start_year,      na.rm = TRUE)),
SD       = c(sd(movies_final_clean$runtime_minutes, na.rm = TRUE),
sd(movies_final_clean$average_rating,  na.rm = TRUE),
sd(movies_final_clean$start_year,      na.rm = TRUE)),
Min      = c(min(movies_final_clean$runtime_minutes, na.rm = TRUE),
min(movies_final_clean$average_rating,  na.rm = TRUE),
min(movies_final_clean$start_year,      na.rm = TRUE)),
Max      = c(max(movies_final_clean$runtime_minutes, na.rm = TRUE),
max(movies_final_clean$average_rating,  na.rm = TRUE),
max(movies_final_clean$start_year,      na.rm = TRUE)))
descriptives %>%
gt() %>%
tab_header(title = "Table 2. Descriptive Statistics") %>%
tab_options(column_labels.font.weight="bold")
model_1 <- lm(average_rating ~ runtime_minutes + start_year, data = movies_final_clean)
summary(model_1)
model_2 <- lm(average_rating ~ runtime_minutes * start_year, data = movies_final_clean)
summary(model_2)
ggplot(movies_final_clean, aes(x = start_year, y = average_rating)) +
geom_point(alpha = 0.1, color = "grey20") +
geom_smooth(method = "lm", color = "red3", size = 1.2) +
labs(
title = "Relationship Between Release Year and IMDb Ratings",
x = "Release Year",
y = "Average IMDb Rating"
) +
theme_minimal(base_size = 8)
ggplot(movies_final_clean, aes(x = runtime_minutes, y = average_rating, color = start_year)) +
geom_point(alpha = 0.1) +
geom_smooth(method = "lm", se = FALSE) +
labs(
title = "Interaction between Runtime and Release Year on IMDb Ratings",
x = "Runtime (minutes)",
y = "Average IMDb Rating"
) +
theme_minimal(base_size = 8)
ggplot(movies_final_clean, aes(x = runtime_minutes, y = average_rating)) +
geom_point(alpha = 0.1) +
geom_smooth(method = "lm", color = "red", se = FALSE) +
labs(title = "Relationship between Runtime and IMDb Rating",
x = "Runtime (minutes)",
y = "Average IMDb Rating") +
theme_minimal(base_size = 12)
ggplot(movies_final_clean, aes(x = runtime_minutes, y = average_rating)) +
geom_point(alpha = 0.1, color = "#1f77b4") +  # ładny, stonowany niebieski
geom_smooth(method = "lm", color = "#d62728", se = FALSE) +  # czerwonawy trend
labs(title = "Relationship between Runtime and IMDb Rating",
x = "Runtime (minutes)",
y = "Average IMDb Rating") +
theme_minimal(base_size = 12)
ggplot(movies_final_clean, aes(x = runtime_minutes, y = average_rating)) +
geom_point(alpha = 0.15, color = "#2C3E50") +  # granatowy
geom_smooth(method = "lm", color = "#E67E22", se = FALSE) +  # pomarańczowy trend
labs(title = "Relationship between Runtime and IMDb Rating",
x = "Runtime (minutes)",
y = "Average IMDb Rating") +
theme_minimal(base_size = 12)
ggplot(movies_final_clean, aes(x = runtime_minutes, y = average_rating)) +
geom_point(alpha = 0.2, color = "#5DADE2") +  # pastelowy błękit
geom_smooth(method = "lm", color = "#1A5276", se = FALSE) +  # ciemniejszy niebieski trend
labs(title = "Relationship between Runtime and IMDb Rating",
x = "Runtime (minutes)",
y = "Average IMDb Rating") +
theme_minimal(base_size = 12)
ggplot(movies_final_clean, aes(x = start_year, y = average_rating)) +
geom_point(alpha = 0.15, color = "#1f77b4") +   # jasnoniebieskie punkty
geom_smooth(method = "lm", se = FALSE, color = "#d62728", size = 1.2) +  # czerwonawy trend
labs(
title = "Relationship between Release Year and IMDb Rating",
x = "Release Year",
y = "Average IMDb Rating"
) +
theme_minimal(base_size = 12)
library(ggeffects)
# Analysis, linear regression
library(lmtest)
library(sandwich)
# robust SE (HC3 is the most conservative and widely used)
coeftest(model_1, vcov = vcovHC(model_1, type = "HC3"))
model_1 <- lm(average_rating ~ runtime_minutes + start_year, data = movies_final_clean)
summary(model_1)
ggplot(movies_final_clean, aes(x = runtime_minutes, y = average_rating)) +
geom_point(alpha = 0.2, color = "#5DADE2") +  # pastelowy błękit
geom_smooth(method = "lm", color = "#1A5276", se = FALSE) +  # ciemniejszy niebieski trend
labs(title = "Relationship between Runtime and IMDb Rating",
x = "Runtime (minutes)",
y = "Average IMDb Rating") +
theme_minimal(base_size = 12)
model_2 <- lm(average_rating ~ runtime_minutes * start_year, data = movies_final_clean)
summary(model_2)
ggplot(movies_final_clean, aes(x = start_year, y = average_rating)) +
geom_point(alpha = 0.15, color = "#1f77b4") +   # jasnoniebieskie punkty
geom_smooth(method = "lm", se = FALSE, color = "#d62728", size = 1.2) +  # czerwonawy trend
labs(
title = "Relationship between Release Year and IMDb Rating",
x = "Release Year",
y = "Average IMDb Rating"
) +
theme_minimal(base_size = 12)
# Analysis, linear regression
model_1 <- lm(average_rating ~ runtime_minutes + start_year, data = movies_final_clean)
summary(model_1)
ggplot(movies_final_clean, aes(x = runtime_minutes, y = average_rating)) +
geom_point(alpha = 0.2, color = "#5DADE2") +  # pastelowy błękit
geom_smooth(method = "lm", color = "#1A5276", se = FALSE) +  # ciemniejszy niebieski trend
labs(title = "Relationship between Runtime and IMDb Rating",
x = "Runtime (minutes)",
y = "Average IMDb Rating") +
theme_minimal(base_size = 12)
model_2 <- lm(average_rating ~ runtime_minutes * start_year, data = movies_final_clean)
summary(model_2)
ggplot(movies_final_clean, aes(x = start_year, y = average_rating)) +
geom_point(alpha = 0.15, color = "#1f77b4") +   # jasnoniebieskie punkty
geom_smooth(method = "lm", se = FALSE, color = "#d62728", size = 1.2) +  # czerwonawy trend
labs(
title = "Relationship between Release Year and IMDb Rating",
x = "Release Year",
y = "Average IMDb Rating"
) +
theme_minimal(base_size = 12)
# Analysis, linear regression
model_1 <- lm(average_rating ~ runtime_minutes + start_year, data = movies_final_clean)
summary(model_1)
ggplot(movies_final_clean, aes(x = runtime_minutes, y = average_rating)) +
geom_point(alpha = 0.2, color = "#5DADE2") +  # pastelowy błękit
geom_smooth(method = "lm", color = "#1A5276", se = FALSE) +  # ciemniejszy niebieski trend
labs(title = "Relationship between Runtime and IMDb Rating",
x = "Runtime (minutes)",
y = "Average IMDb Rating") +
theme_minimal(base_size = 12)
model_2 <- lm(average_rating ~ runtime_minutes * start_year, data = movies_final_clean)
summary(model_2)
ggplot(movies_final_clean, aes(x = start_year, y = average_rating)) +
geom_point(alpha = 0.2, color = "#1f77b4") +   # jasnoniebieskie punkty
geom_smooth(method = "lm", se = FALSE, color = "#d62728", size = 1.2) +  # czerwonawy trend
labs(
title = "Relationship between Release Year and IMDb Rating",
x = "Release Year",
y = "Average IMDb Rating"
) +
theme_minimal(base_size = 12)
# Get predicted ratings while controlling for year
pred <- ggpredict(model_1, terms = "runtime_minutes [all]")
install.packages("ggeffects")
library(ggeffects)
# Get predicted ratings while controlling for year
pred <- ggpredict(model_1, terms = "runtime_minutes [all]")
ggplot(pred, aes(x = x, y = predicted)) +
geom_line(color = "#1A5276", size = 1.2) +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high),
fill = "#5DADE2", alpha = 0.3) +
labs(
title = "Predicted IMDb Rating vs Runtime (controlling for Release Year)",
x = "Runtime (minutes)",
y = "Predicted IMDb Rating"
) +
theme_minimal(base_size = 12)
library(modelsummary)
library(sandwich)
VHC3 <- sandwich::vcovHC(model_1, type = "HC3")
msummary(model_1,
vcov = VHC3,
stars = TRUE,
gof_omit = "IC|AIC|BIC",
coef_map = c(
"(Intercept)" = "Intercept",
"runtime_minutes" = "Runtime (minutes)",
"start_year" = "Release year"
),
title = "Table 3. OLS regression: IMDb ratings on runtime (controlling for release year)")
ggplot(movies_final_clean, aes(x = runtime_minutes, y = average_rating)) +
geom_point(alpha = 0.2, color = "#5DADE2") +
geom_smooth(method = "lm", color = "#1A5276", se = FALSE, size = 1.2) +
labs(
title = "Relationship between Runtime and IMDb Rating",
subtitle = "OLS regression controlling for release year",
x = "Runtime (minutes)",
y = "Average IMDb Rating"
) +
theme_minimal(base_size = 13) +
theme(
plot.title = element_text(face = "bold", size = 14),
plot.subtitle = element_text(size = 11)
)
ggplot(movies_final_clean, aes(x = runtime_minutes, y = average_rating)) +
geom_point(alpha = 0.2, color = "#5DADE2") +
geom_smooth(method = "lm", color = "#1A5276", se = FALSE) +
labs(title = "Relationship between Runtime and IMDb Rating",
x = "Runtime (minutes)",
y = "Average IMDb Rating") +
theme_minimal(base_size = 12)
model_quad <- lm(average_rating ~ runtime_minutes + I(runtime_minutes^2) + start_year, data = movies_final_clean)
summary(model_quad)
library(modelsummary)
msummary(list("Linear model" = model_1, "Quadratic model" = model_quad),
stars = TRUE,
gof_omit = "IC|AIC|BIC",
title = "Comparison of Linear and Quadratic Models")
ggplot(movies_final_clean, aes(x = runtime_minutes, y = average_rating)) +
geom_point(alpha = 0.1, color = "#AED6F1") +
geom_smooth(method = "lm", formula = y ~ x, color = "#1A5276", se = FALSE, size = 1.1) +
geom_smooth(method = "lm", formula = y ~ poly(x, 2), color = "#E74C3C", se = FALSE, size = 1.1) +
labs(
title = "Linear vs Quadratic Fit: Runtime and IMDb Rating",
x = "Runtime (minutes)",
y = "Average IMDb Rating",
caption = "Blue = linear model; Red = quadratic model"
) +
theme_minimal(base_size = 13)
ggplot(movies_final_clean, aes(x = runtime_minutes, y = average_rating)) +
geom_point(alpha = 0.1, color = "#AED6F1") +
geom_smooth(method = "lm", formula = y ~ x, color = "#1A5276", se = FALSE, size = 1.1) +
geom_smooth(method = "lm", formula = y ~ poly(x, 2), color = "#E74C3C", se = FALSE, size = 1.1) +
coord_cartesian(xlim = c(40, 250), ylim = c(0, 10)) +
labs(
title = "Linear vs Quadratic Fit: Runtime and IMDb Rating",
x = "Runtime (minutes)",
y = "Average IMDb Rating",
caption = "Blue = linear model; Red = quadratic model (predictions capped to data range)"
) +
theme_minimal(base_size = 13)
library(ggeffects)
library(ggplot2)
# (1) Simple raw relationship
p1 <- ggplot(movies_final_clean, aes(x = runtime_minutes, y = average_rating)) +
geom_point(alpha = 0.2, color = "#5DADE2") +
geom_smooth(method = "lm", color = "#1A5276", se = FALSE, size = 1.2) +
labs(
title = "Runtime and IMDb Rating (Raw Relationship)",
x = "Runtime (minutes)",
y = "Average IMDb Rating"
) +
theme_minimal(base_size = 13)
# (2) Model-adjusted relationship controlling for release year
pred <- ggpredict(model_1, terms = "runtime_minutes [all]")
p2 <- ggplot(pred, aes(x = x, y = predicted)) +
geom_line(color = "#1A5276", size = 1.2) +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high), fill = "#5DADE2", alpha = 0.3) +
labs(
title = "Predicted IMDb Rating vs Runtime",
subtitle = "Controlling for release year (OLS regression)",
x = "Runtime (minutes)",
y = "Predicted IMDb Rating"
) +
theme_minimal(base_size = 13)
p1
p2
library(ggeffects)
library(ggplot2)
# (1) Simple raw relationship
ggplot(movies_final_clean, aes(x = runtime_minutes, y = average_rating)) +
geom_point(alpha = 0.2, color = "#5DADE2") +
geom_smooth(method = "lm", color = "#1A5276", se = FALSE, size = 1.2) +
labs(
title = "Runtime and IMDb Rating",
x = "Runtime (minutes)",
y = "Average IMDb Rating"
) +
theme_minimal(base_size = 13)
# (2) Model-adjusted relationship controlling for release year
pred <- ggpredict(model_1, terms = "runtime_minutes [all]")
ggplot(pred, aes(x = x, y = predicted)) +
geom_line(color = "#1A5276", size = 1.2) +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high), fill = "#5DADE2", alpha = 0.2) +
labs(
title = "Predicted IMDb Rating vs Runtime",
subtitle = "Controlling for release year (OLS regression)",
x = "Runtime (minutes)",
y = "Predicted IMDb Rating"
) +
theme_minimal(base_size = 13)
ggplot(movies_final_clean, aes(x = runtime_minutes, y = average_rating)) +
geom_point(alpha = 0.2, color = "#5DADE2") +
geom_smooth(method = "lm", color = "#1A5276", se = FALSE, size = 1.2) +
labs(
title = "Relationship between Runtime and IMDb Rating",
subtitle = "OLS regression controlling for release year",
x = "Runtime (minutes)",
y = "Average IMDb Rating") +
theme_minimal(base_size = 13) +
theme(
plot.title = element_text(face = "bold", size = 14),
plot.subtitle = element_text(size = 11))
ggplot(movies_final_clean, aes(x = runtime_minutes, y = average_rating)) +
geom_point(alpha = 0.2, color = "#5DADE2") +
geom_smooth(method = "lm", color = "#1A5276", se = FALSE, size = 1.2) +
labs(
title = "Relationship between Runtime and IMDb Rating",
subtitle = "OLS regression controlling for release year",
x = "Runtime (minutes)",
y = "Average IMDb Rating") +
theme_minimal(base_size = 13) +
theme(
plot.title = element_text(face = "bold", size = 14),
plot.subtitle = element_text(size = 11))
ggplot(movies_final_clean, aes(x = runtime_minutes, y = average_rating)) +
geom_point(alpha = 0.2, color = "#5DADE2") +
geom_smooth(method = "lm", color = "#1A5276", se = FALSE) +
labs(title = "Relationship between Runtime and IMDb Rating",
x = "Runtime (minutes)",
y = "Average IMDb Rating") +
theme_minimal(base_size = 12)
#Simple relationship
ggplot(movies_final_clean, aes(x = runtime_minutes, y = average_rating)) +
geom_point(alpha = 0.2, color = "#5DADE2") +
geom_smooth(method = "lm", color = "#1A5276", se = FALSE, size = 1.2) +
labs(
title = "Runtime and IMDb Rating",
x = "Runtime (minutes)",
y = "Average IMDb Rating"
) +
theme_minimal(base_size = 13)
#Model-adjusted relationship controlling for release year
pred <- ggpredict(model_1, terms = "runtime_minutes [all]")
ggplot(pred, aes(x = x, y = predicted)) +
geom_line(color = "#1A5276", size = 1.2) +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high), fill = "#5DADE2", alpha = 0.2) +
labs(
title = "Predicted IMDb Rating vs Runtime",
subtitle = "Controlling for release year (OLS regression)",
x = "Runtime (minutes)",
y = "Predicted IMDb Rating"
) +
theme_minimal(base_size = 13)
## Regression Analysis
# Baseline OLS regression
model_1 <- lm(average_rating ~ runtime_minutes + start_year, data = movies_final_clean)
summary(model_1)
# Simple relationship visualization
ggplot(movies_final_clean, aes(x = runtime_minutes, y = average_rating)) +
geom_point(alpha = 0.2, color = "#5DADE2") +
geom_smooth(method = "lm", color = "#1A5276", se = FALSE, size = 1.2) +
labs(
title = "Relationship between Runtime and IMDb Rating",
x = "Runtime (minutes)",
y = "Average IMDb Rating") +
theme_minimal(base_size = 13)
# Predicted relationship (controlling for release year)
pred <- ggpredict(model_1, terms = "runtime_minutes [all]")
ggplot(pred, aes(x = x, y = predicted)) +
geom_line(color = "#1A5276", size = 1.2) +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high), fill = "#5DADE2", alpha = 0.2) +
labs(
title = "Predicted IMDb Rating vs Runtime",
subtitle = "Controlling for release year (OLS regression)",
x = "Runtime (minutes)",
y = "Predicted IMDb Rating"
) +
theme_minimal(base_size = 13)
# Quadratic model (testing nonlinearity)
model_quad <- lm(average_rating ~ runtime_minutes + I(runtime_minutes^2) + start_year, data = movies_final_clean)
summary(model_quad)
ggplot(movies_final_clean, aes(x = runtime_minutes, y = average_rating)) +
geom_point(alpha = 0.2, color = "#AED6F1") +
geom_smooth(method = "lm", formula = y ~ x, color = "#1A5276", se = FALSE, size = 1.1) +
geom_smooth(method = "lm", formula = y ~ poly(x, 2), color = "#E74C3C", se = FALSE, size = 1.1) +
coord_cartesian(xlim = c(40, 250), ylim = c(0, 10)) +
labs(
title = "Linear vs Quadratic Fit: Runtime and IMDb Rating",
x = "Runtime (minutes)",
y = "Average IMDb Rating",
caption = "Blue = linear model; Red = quadratic model (predictions capped to data range)"
) +
theme_minimal(base_size = 13)
# Robustness Check - interaction with release year
model_2 <- lm(average_rating ~ runtime_minutes * start_year, data = movies_final_clean)
summary(model_2)
