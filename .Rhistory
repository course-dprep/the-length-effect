geom_ribbon(aes(ymin = conf.low, ymax = conf.high), fill = "#5DADE2", alpha = 0.2) +
labs(
title = "Predicted IMDb Rating vs Runtime",
subtitle = "Controlling for release year (OLS regression)",
x = "Runtime (minutes)",
y = "Predicted IMDb Rating"
) +
theme_minimal(base_size = 13)
ggplot(movies_final_clean, aes(x = runtime_minutes, y = average_rating)) +
geom_point(alpha = 0.2, color = "#5DADE2") +
geom_smooth(method = "lm", color = "#1A5276", se = FALSE, size = 1.2) +
labs(
title = "Relationship between Runtime and IMDb Rating",
subtitle = "OLS regression controlling for release year",
x = "Runtime (minutes)",
y = "Average IMDb Rating") +
theme_minimal(base_size = 13) +
theme(
plot.title = element_text(face = "bold", size = 14),
plot.subtitle = element_text(size = 11))
ggplot(movies_final_clean, aes(x = runtime_minutes, y = average_rating)) +
geom_point(alpha = 0.2, color = "#5DADE2") +
geom_smooth(method = "lm", color = "#1A5276", se = FALSE, size = 1.2) +
labs(
title = "Relationship between Runtime and IMDb Rating",
subtitle = "OLS regression controlling for release year",
x = "Runtime (minutes)",
y = "Average IMDb Rating") +
theme_minimal(base_size = 13) +
theme(
plot.title = element_text(face = "bold", size = 14),
plot.subtitle = element_text(size = 11))
ggplot(movies_final_clean, aes(x = runtime_minutes, y = average_rating)) +
geom_point(alpha = 0.2, color = "#5DADE2") +
geom_smooth(method = "lm", color = "#1A5276", se = FALSE) +
labs(title = "Relationship between Runtime and IMDb Rating",
x = "Runtime (minutes)",
y = "Average IMDb Rating") +
theme_minimal(base_size = 12)
#Simple relationship
ggplot(movies_final_clean, aes(x = runtime_minutes, y = average_rating)) +
geom_point(alpha = 0.2, color = "#5DADE2") +
geom_smooth(method = "lm", color = "#1A5276", se = FALSE, size = 1.2) +
labs(
title = "Runtime and IMDb Rating",
x = "Runtime (minutes)",
y = "Average IMDb Rating"
) +
theme_minimal(base_size = 13)
#Model-adjusted relationship controlling for release year
pred <- ggpredict(model_1, terms = "runtime_minutes [all]")
ggplot(pred, aes(x = x, y = predicted)) +
geom_line(color = "#1A5276", size = 1.2) +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high), fill = "#5DADE2", alpha = 0.2) +
labs(
title = "Predicted IMDb Rating vs Runtime",
subtitle = "Controlling for release year (OLS regression)",
x = "Runtime (minutes)",
y = "Predicted IMDb Rating"
) +
theme_minimal(base_size = 13)
## Regression Analysis
# Baseline OLS regression
model_1 <- lm(average_rating ~ runtime_minutes + start_year, data = movies_final_clean)
summary(model_1)
# Simple relationship visualization
ggplot(movies_final_clean, aes(x = runtime_minutes, y = average_rating)) +
geom_point(alpha = 0.2, color = "#5DADE2") +
geom_smooth(method = "lm", color = "#1A5276", se = FALSE, size = 1.2) +
labs(
title = "Relationship between Runtime and IMDb Rating",
x = "Runtime (minutes)",
y = "Average IMDb Rating") +
theme_minimal(base_size = 13)
# Predicted relationship (controlling for release year)
pred <- ggpredict(model_1, terms = "runtime_minutes [all]")
ggplot(pred, aes(x = x, y = predicted)) +
geom_line(color = "#1A5276", size = 1.2) +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high), fill = "#5DADE2", alpha = 0.2) +
labs(
title = "Predicted IMDb Rating vs Runtime",
subtitle = "Controlling for release year (OLS regression)",
x = "Runtime (minutes)",
y = "Predicted IMDb Rating"
) +
theme_minimal(base_size = 13)
# Quadratic model (testing nonlinearity)
model_quad <- lm(average_rating ~ runtime_minutes + I(runtime_minutes^2) + start_year, data = movies_final_clean)
summary(model_quad)
ggplot(movies_final_clean, aes(x = runtime_minutes, y = average_rating)) +
geom_point(alpha = 0.2, color = "#AED6F1") +
geom_smooth(method = "lm", formula = y ~ x, color = "#1A5276", se = FALSE, size = 1.1) +
geom_smooth(method = "lm", formula = y ~ poly(x, 2), color = "#E74C3C", se = FALSE, size = 1.1) +
coord_cartesian(xlim = c(40, 250), ylim = c(0, 10)) +
labs(
title = "Linear vs Quadratic Fit: Runtime and IMDb Rating",
x = "Runtime (minutes)",
y = "Average IMDb Rating",
caption = "Blue = linear model; Red = quadratic model (predictions capped to data range)"
) +
theme_minimal(base_size = 13)
# Robustness Check - interaction with release year
model_2 <- lm(average_rating ~ runtime_minutes * start_year, data = movies_final_clean)
summary(model_2)
knitr::opts_chunk$set(
echo    = FALSE,
message = FALSE,
warning = FALSE,
fig.align = "center",
fig.width = 7, fig.height = 4, dpi = 180
)
options(tidyverse.quiet = TRUE)
need_pkgs <- c(
"tidyverse","data.table","readr","lubridate",
"knitr","kableExtra","broom"
)
# Optional (used only if you later add those features)
opt_pkgs <- c("ISOweek","zoo","janitor","gt")
missing <- setdiff(need_pkgs, rownames(installed.packages()))
if (length(missing)) {
stop(
sprintf("Please install missing packages before knitting: %s",
paste(missing, collapse = ", "))
)
}
invisible(lapply(need_pkgs, library, character.only = TRUE))
present_opt <- intersect(opt_pkgs, rownames(installed.packages()))
if (length(present_opt)) {
invisible(lapply(present_opt, library, character.only = TRUE))
}
## Data Loading
# Load IMDb title.basics data
title.basics <- fread("https://datasets.imdbws.com/title.basics.tsv.gz")
# Load IMDb title.ratings data
title.ratings <- fread("https://datasets.imdbws.com/title.ratings.tsv.gz")
## Initial data overview
# Summary of title.basics
dim(title.basics)
nrow(title.basics)
ncol(title.basics)
colnames(title.basics)
str(title.basics)
summary(title.basics)
head(title.basics, 10)
# Summary of title.ratings
dim(title.ratings)
nrow(title.ratings)
ncol(title.ratings)
colnames(title.ratings)
str(title.ratings)
summary(title.ratings)
head(title.ratings, 10)
# Complete summary title.basics & title.ratings
data_size_summary <- tibble::tibble(
dataset = c("title.basics","title.ratings"),
n_rows  = c(nrow(title.basics), nrow(title.ratings)),
n_cols  = c(ncol(title.basics), ncol(title.ratings)))
knitr::kable(data_size_summary, caption = "Data size summary") |>
kableExtra::kable_styling(full_width = FALSE,
bootstrap_options = c("striped","hover","condensed"))
# Checking variable type
dplyr::glimpse(title.basics[, c("primaryTitle", "startYear", "runtimeMinutes")])
sapply(title.basics[, c("primaryTitle", "startYear", "runtimeMinutes")], typeof)
dplyr::glimpse(title.ratings[, "averageRating", drop = FALSE])
sapply(title.ratings[, "averageRating", drop = FALSE], typeof)
# Replace "\N" and "" with NA
to_na <- function(x) {
y <- as.character(x)
y[y %in% c("\\N", "N", "")] <- NA_character_
y
}
# Cleaning the titile.basics dataset
title.basics_clean <- title.basics %>%
mutate(across(c(titleType, primaryTitle, startYear, runtimeMinutes), to_na)) %>%
mutate(startYear = suppressWarnings(as.integer(startYear)),
runtimeMinutes = suppressWarnings(as.numeric(runtimeMinutes))) %>%
select(tconst, titleType, primaryTitle, originalTitle, isAdult,
startYear, endYear, runtimeMinutes, genres) %>%
distinct(tconst, .keep_all = TRUE)
# Cleaning the title.ratings dataset
title.ratings_clean <- title.ratings %>%
mutate(across(c(averageRating, numVotes), to_na)) %>%
mutate(averageRating = as.numeric(averageRating),
numVotes = as.integer(numVotes)) %>%
select(tconst, averageRating, numVotes) %>%
distinct(tconst, .keep_all = TRUE)
# Verification of variable types after the cleaning
dplyr::glimpse(title.basics_clean[, c("primaryTitle", "startYear", "runtimeMinutes")])
sapply(title.basics_clean[, c("primaryTitle", "startYear", "runtimeMinutes")], typeof)
dplyr::glimpse(title.ratings_clean[, "averageRating", drop = FALSE])
sapply(title.ratings_clean[, "averageRating", drop = FALSE], typeof)
# Checking missing values
colSums(is.na(title.basics_clean[, c("primaryTitle", "startYear", "runtimeMinutes")]))
colSums(is.na(title.ratings_clean[, c("averageRating", "numVotes")]))
# Variable table:
var_dict <- tribble(
~Variable,  ~Class, ~Definition, ~Role,
"runtimeMinutes", "numeric",  "Duration of the movie in minutes", "Independent variable",
"averageRating",  "numeric",   "Average IMDb user rating (0â€“10 scale, aggregated from user votes)", "Dependent variable",
"startYear",      "numeric",  "Year the movie was released", "Control variable")
var_dict %>%
gt() %>%
tab_header(title = "Table 1. Variable Explanation") %>%
tab_options(column_labels.font.weight = "bold")
### Checking for outliers in IMDb ratings
# Numeric summary of average ratings
summary(title.ratings_clean$averageRating)
# Histogram of rating distribution (excluding missing values)
ratings_clean <- dplyr::filter(title.ratings_clean, !is.na(averageRating))
ggplot(ratings_clean, aes(x = averageRating)) +
geom_histogram(binwidth = 0.25, color = "white", fill = "grey30", boundary = 0) +
scale_x_continuous(limits = c(0, 10), breaks = 0:10) +
labs(
x = "Average rating",
y = "Count",
title = "Distribution of IMDb Ratings"
) +
theme_minimal(base_size = 14)
# Filter for movies only (and reasonable ranges)
title.basics_filtered <- title.basics_clean %>%
filter(titleType %in% c("movie", "tvMovie"),
runtimeMinutes >40,
runtimeMinutes <= 300,
startYear <= 2025) %>%
select(tconst, primaryTitle, startYear, runtimeMinutes) %>%
distinct(tconst, .keep_all = TRUE)
# Renaming variables
title.basics_filtered <- title.basics_filtered %>%
rename(
title           = primaryTitle,
start_year      = startYear,
runtime_minutes = runtimeMinutes)
title.ratings_clean <- title.ratings_clean %>%
rename(
average_rating  = averageRating,
votes           = numVotes)
# Merging datasets
merged_data <- title.basics_filtered %>%
select(tconst, runtime_minutes, start_year, title) %>%
mutate(
runtime_minutes = (as.numeric(runtime_minutes)),
start_year      = (as.integer(start_year)),
title = (as.character(title))) %>%
inner_join(
title.ratings_clean %>% select(tconst, average_rating, votes),
by = "tconst") %>%
mutate(
average_rating = as.numeric(average_rating),
votes= as.integer(votes))
# Checking the duplicated data
keys <- c("title", "start_year", "runtime_minutes")
dup_count <- sum(duplicated(select(merged_data, all_of(keys))))
dup_count
duplicated_movies <- merged_data %>%
mutate(is_duplicate = duplicated(select(., all_of(keys))) |
duplicated(select(., all_of(keys)), fromLast = TRUE)) %>%
filter(is_duplicate) %>%
select(title, start_year, runtime_minutes, average_rating, votes) %>%
arrange(title, start_year, runtime_minutes)
# Count duplicate groups (titles that appear multiple times)
duplicate_summary <- merged_data %>%
count(across(all_of(keys)), sort = TRUE) %>%
filter(n > 1) %>% slice_head(n = 20)
duplicate_summary
# Handling Duplicates - retaining only one record per movie, the one with highest number of votes
movies_deduplicated <- merged_data %>%
group_by(across(all_of(keys))) %>%
slice_max(votes, with_ties = FALSE) %>%
ungroup()
# Verification
sum(duplicated(select(movies_deduplicated, all_of(keys))))
## Handling missing data
colSums(is.na(movies_deduplicated[, c("runtime_minutes", "average_rating", "start_year", "title")]))
summary(movies_deduplicated)
movies_final_clean <- movies_deduplicated
# Descriptive table
descriptives <- tibble(
Variable = c("runtime_minutes","average_rating","start_year"),
N        = c(sum(!is.na(movies_final_clean$runtime_minutes)),
sum(!is.na(movies_final_clean$average_rating)),
sum(!is.na(movies_final_clean$start_year))),
Missing  = c(sum(is.na(movies_final_clean$runtime_minutes)),
sum(is.na(movies_final_clean$average_rating)),
sum(is.na(movies_final_clean$start_year))),
Mean     = c(mean(movies_final_clean$runtime_minutes, na.rm = TRUE),
mean(movies_final_clean$average_rating,  na.rm = TRUE),
mean(movies_final_clean$start_year,      na.rm = TRUE)),
SD       = c(sd(movies_final_clean$runtime_minutes, na.rm = TRUE),
sd(movies_final_clean$average_rating,  na.rm = TRUE),
sd(movies_final_clean$start_year,      na.rm = TRUE)),
Min      = c(min(movies_final_clean$runtime_minutes, na.rm = TRUE),
min(movies_final_clean$average_rating,  na.rm = TRUE),
min(movies_final_clean$start_year,      na.rm = TRUE)),
Max      = c(max(movies_final_clean$runtime_minutes, na.rm = TRUE),
max(movies_final_clean$average_rating,  na.rm = TRUE),
max(movies_final_clean$start_year,      na.rm = TRUE)))
descriptives %>%
gt() %>%
tab_header(title = "Table 2. Descriptive Statistics") %>%
tab_options(column_labels.font.weight="bold")
## Regression Analysis
# OLS regression: runtime + release year (control)
model_1 <- lm(average_rating ~ runtime_minutes + start_year, data = movies_final_clean)
summary(model_1)
# Visualization of the relationship between runtime and IMDb rating
ggplot(movies_final_clean, aes(x = runtime_minutes, y = average_rating)) +
geom_point(alpha = 0.2, color = "#5DADE2") +
geom_smooth(method = "lm", color = "#1A5276", se = FALSE, size = 1.2) +
labs(
title = "Relationship between Runtime and IMDb Rating",
subtitle = "Raw correlation (not controlling for release year)",
x = "Runtime (minutes)",
y = "Average IMDb Rating"
) +
theme_minimal(base_size = 13)
# Predicted relationship (controlling for release year)
pred <- ggpredict(model_1, terms = "runtime_minutes [all]")
## Regression Analysis
# OLS regression: runtime + release year (control)
model_1 <- lm(average_rating ~ runtime_minutes + start_year, data = movies_final_clean)
summary(model_1)
# Visualization of the relationship between runtime and IMDb rating
ggplot(movies_final_clean, aes(x = runtime_minutes, y = average_rating)) +
geom_point(alpha = 0.2, color = "#5DADE2") +
geom_smooth(method = "lm", color = "#1A5276", se = FALSE, size = 1.2) +
labs(
title = "Relationship between Runtime and IMDb Rating",
subtitle = "Raw correlation (not controlling for release year)",
x = "Runtime (minutes)",
y = "Average IMDb Rating"
) +
theme_minimal(base_size = 13)
# Predicted relationship (controlling for release year)
library(ggeffects)
pred <- ggpredict(model_1, terms = "runtime_minutes [all]")
ggplot(pred, aes(x = x, y = predicted)) +
geom_line(color = "#1A5276", size = 1.2) +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high), fill = "#5DADE2", alpha = 0.2) +
labs(
title = "Predicted IMDb Rating vs Runtime",
subtitle = "Controlling for release year)",
x = "Runtime (minutes)",
y = "Predicted IMDb Rating"
) +
theme_minimal(base_size = 13)
# Quadratic Model
model_quad <- lm(average_rating ~ runtime_minutes + I(runtime_minutes^2) + start_year,
data = movies_final_clean)
summary(model_quad)
ggplot(movies_final_clean, aes(x = runtime_minutes, y = average_rating)) +
geom_point(alpha = 0.2, color = "#AED6F1") +
geom_smooth(method = "lm", formula = y ~ x, color = "#1A5276", se = FALSE, size = 1.1) +
geom_smooth(method = "lm", formula = y ~ poly(x, 2), color = "#E74C3C", se = FALSE, size = 1.1) +
coord_cartesian(xlim = c(40, 250), ylim = c(0, 10)) +
labs(
title = "Linear vs Quadratic Fit: Runtime and IMDb Rating",
subtitle = "Controlling for release year",
x = "Runtime (minutes)",
y = "Average IMDb Rating",
caption = "Blue = linear model; Red = quadratic model (within observed data range)") +
theme_minimal(base_size = 13)
#Robustness Check - interaction with release year
model_2 <- lm(average_rating ~ runtime_minutes * start_year, data = movies_final_clean)
summary(model_2)
## Regression Analysis
# OLS regression: runtime + release year (control)
model_1 <- lm(average_rating ~ runtime_minutes + start_year, data = movies_final_clean)
summary(model_1)
# Visualization of the relationship between runtime and IMDb rating
ggplot(movies_final_clean, aes(x = runtime_minutes, y = average_rating)) +
geom_point(alpha = 0.2, color = "#5DADE2") +
geom_smooth(method = "lm", color = "#1A5276", se = FALSE, size = 1.2) +
labs(
title = "Relationship between Runtime and IMDb Rating",
subtitle = "Relationship between Runtime and IMDb Rating"",
x = "Runtime (minutes)",
## Regression Analysis
# OLS regression: runtime + release year (control)
model_1 <- lm(average_rating ~ runtime_minutes + start_year, data = movies_final_clean)
summary(model_1)
# Visualization of the relationship between runtime and IMDb rating
ggplot(movies_final_clean, aes(x = runtime_minutes, y = average_rating)) +
geom_point(alpha = 0.2, color = "#5DADE2") +
geom_smooth(method = "lm", color = "#1A5276", se = FALSE, size = 1.2) +
labs(
title = "Relationship between Runtime and IMDb Rating",
subtitle = "Relationship between Runtime and IMDb Rating",
x = "Runtime (minutes)",
y = "Average IMDb Rating"
) +
theme_minimal(base_size = 8)
# Predicted relationship (controlling for release year)
library(ggeffects)
pred <- ggpredict(model_1, terms = "runtime_minutes [all]")
ggplot(pred, aes(x = x, y = predicted)) +
geom_line(color = "#1A5276", size = 1.2) +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high), fill = "#5DADE2", alpha = 0.2) +
labs(
title = "Predicted IMDb Rating vs Runtime",
subtitle = "Controlling for release year)",
x = "Runtime (minutes)",
y = "Predicted IMDb Rating"
) +
theme_minimal(base_size = 8)
# Quadratic Model
model_quad <- lm(average_rating ~ runtime_minutes + I(runtime_minutes^2) + start_year,
data = movies_final_clean)
summary(model_quad)
ggplot(movies_final_clean, aes(x = runtime_minutes, y = average_rating)) +
geom_point(alpha = 0.2, color = "#AED6F1") +
geom_smooth(method = "lm", formula = y ~ x, color = "#1A5276", se = FALSE, size = 1.1) +
geom_smooth(method = "lm", formula = y ~ poly(x, 2), color = "#E74C3C", se = FALSE, size = 1.1) +
coord_cartesian(xlim = c(40, 250), ylim = c(0, 10)) +
labs(
title = "Linear vs Quadratic Fit: Runtime and IMDb Rating",
subtitle = "Controlling for release year",
x = "Runtime (minutes)",
y = "Average IMDb Rating",
caption = "Blue = linear model; Red = quadratic model (within observed data range)") +
theme_minimal(base_size = 8)
#Robustness Check - interaction with release year
model_2 <- lm(average_rating ~ runtime_minutes * start_year, data = movies_final_clean)
summary(model_2)
## Regression Analysis
# OLS regression: runtime + release year (control)
model_1 <- lm(average_rating ~ runtime_minutes + start_year, data = movies_final_clean)
summary(model_1)
# Visualization of the relationship between runtime and IMDb rating
ggplot(movies_final_clean, aes(x = runtime_minutes, y = average_rating)) +
geom_point(alpha = 0.2, color = "#5DADE2") +
geom_smooth(method = "lm", color = "#1A5276", se = FALSE, size = 1.2) +
labs(
title = "Relationship between Runtime and IMDb Rating",
x = "Runtime (minutes)",
y = "Average IMDb Rating") +
theme_minimal(base_size = 8)
# Predicted relationship (controlling for release year)
library(ggeffects)
pred <- ggpredict(model_1, terms = "runtime_minutes [all]")
ggplot(pred, aes(x = x, y = predicted)) +
geom_line(color = "#1A5276", size = 1.2) +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high), fill = "#5DADE2", alpha = 0.2) +
labs(
title = "Predicted IMDb Rating vs Runtime",
subtitle = "Controlling for release year)",
x = "Runtime (minutes)",
y = "Predicted IMDb Rating"
) +
theme_minimal(base_size = 8)
# Quadratic Model
model_quad <- lm(average_rating ~ runtime_minutes + I(runtime_minutes^2) + start_year,
data = movies_final_clean)
summary(model_quad)
ggplot(movies_final_clean, aes(x = runtime_minutes, y = average_rating)) +
geom_point(alpha = 0.2, color = "#AED6F1") +
geom_smooth(method = "lm", formula = y ~ x, color = "#1A5276", se = FALSE, size = 1.1) +
geom_smooth(method = "lm", formula = y ~ poly(x, 2), color = "#E74C3C", se = FALSE, size = 1.1) +
coord_cartesian(xlim = c(40, 250), ylim = c(0, 10)) +
labs(
title = "Linear vs Quadratic Fit: Runtime and IMDb Rating",
subtitle = "Controlling for release year",
x = "Runtime (minutes)",
y = "Average IMDb Rating",
caption = "Blue = linear model; Red = quadratic model (within observed data range)") +
theme_minimal(base_size = 8)
#Robustness Check - interaction with release year
model_2 <- lm(average_rating ~ runtime_minutes * start_year, data = movies_final_clean)
summary(model_2)
## Regression Analysis
# OLS regression: runtime + release year (control)
model_1 <- lm(average_rating ~ runtime_minutes + start_year, data = movies_final_clean)
summary(model_1)
# Visualization of the relationship between runtime and IMDb rating
ggplot(movies_final_clean, aes(x = runtime_minutes, y = average_rating)) +
geom_point(alpha = 0.2, color = "#5DADE2") +
geom_smooth(method = "lm", color = "#1A5276", se = FALSE, size = 1.2) +
labs(
title = "Relationship between Runtime and IMDb Rating",
x = "Runtime (minutes)",
y = "Average IMDb Rating") +
theme_minimal(base_size = 13)
# Predicted relationship (controlling for release year)
library(ggeffects)
pred <- ggpredict(model_1, terms = "runtime_minutes [all]")
ggplot(pred, aes(x = x, y = predicted)) +
geom_line(color = "#1A5276", size = 1.2) +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high), fill = "#5DADE2", alpha = 0.2) +
labs(
title = "Predicted IMDb Rating vs Runtime",
subtitle = "Controlling for release year",
x = "Runtime (minutes)",
y = "Predicted IMDb Rating"
) +
theme_minimal(base_size = 13)
# Quadratic Model
model_quad <- lm(average_rating ~ runtime_minutes + I(runtime_minutes^2) + start_year,
data = movies_final_clean)
summary(model_quad)
ggplot(movies_final_clean, aes(x = runtime_minutes, y = average_rating)) +
geom_point(alpha = 0.2, color = "#AED6F1") +
geom_smooth(method = "lm", formula = y ~ x, color = "#1A5276", se = FALSE, size = 1.1) +
geom_smooth(method = "lm", formula = y ~ poly(x, 2), color = "#E74C3C", se = FALSE, size = 1.1) +
coord_cartesian(xlim = c(40, 250), ylim = c(0, 10)) +
labs(
title = "Linear vs Quadratic Fit: Runtime and IMDb Rating",
x = "Runtime (minutes)",
y = "Average IMDb Rating",
caption = "Blue = linear model; Red = quadratic model (within observed data range)") +
theme_minimal(base_size =13)
#Robustness Check - interaction with release year
model_2 <- lm(average_rating ~ runtime_minutes * start_year, data = movies_final_clean)
summary(model_2)
