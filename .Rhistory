N        = c(sum(!is.na(data_final$runtimeMinutes)),
sum(!is.na(data_final$averageRating)),
sum(!is.na(data_final$startYear))),
Missing  = c(sum(is.na(data_final$runtimeMinutes)),
sum(is.na(data_final$averageRating)),
sum(is.na(data_final$startYear))),
Mean     = c(mean(data_final$runtimeMinutes, na.rm = TRUE),
mean(data_final$averageRating,  na.rm = TRUE),
mean(data_final$startYear,      na.rm = TRUE)),
SD       = c(sd(data_final$runtimeMinutes, na.rm = TRUE),
sd(data_final$averageRating,  na.rm = TRUE),
sd(data_final$startYear,      na.rm = TRUE)),
Min      = c(min(data_final$runtimeMinutes, na.rm = TRUE),
min(data_final$averageRating,  na.rm = TRUE),
min(data_final$startYear,      na.rm = TRUE)),
Max      = c(max(data_final$runtimeMinutes, na.rm = TRUE),
max(data_final$averageRating,  na.rm = TRUE),
max(data_final$startYear,      na.rm = TRUE)))
descriptives %>%
gt() %>%
tab_header(title = "Table 2. Descriptive Statistics") %>%
tab_options(column_labels.font.weight="bold")
# changing character for numerical and change \N for NA
to_na <- function(x) {
y <- as.character(x)
y[y %in% c("\\N", "N", "")] <- NA_character_
y
}
title.basics_clean <- title.basics %>%
mutate(
titleType      = to_na(titleType),
primaryTitle   = to_na(primaryTitle),
startYear      = to_na(startYear),
runtimeMinutes = to_na(runtimeMinutes)) %>%
mutate(
startYear      = suppressWarnings(as.integer(startYear)),
runtimeMinutes = suppressWarnings(as.numeric(runtimeMinutes)))
# Checking again the variable type correct
str(title.basics_clean)                 # compact overview
dplyr::glimpse(title.basics_clean)      # tidyverse overview
sapply(title.basics_clean, class)       # class of each column
sapply(title.basics_clean, typeof)
# Variable table:
var_dict <- tribble(
~Variable,        ~Date_Class,      ~Definition,                                                        ~Role,
"runtimeMinutes", "numeric",  "Duration of the movie in minutes",                                 "Independent variable",
"averageRating",  "numeric",   "Average IMDb user rating (0â€“10 scale, aggregated from user votes)", "Dependent variable",
"startYear",      "numeric",  "Year the movie was released",                                      "Control variable")
var_dict %>%
gt() %>%
tab_header(title = "Table 1. Variable Explanation") %>%
tab_options(column_labels.font.weight = "bold")
# checking outliers in averageRating - histogram
ratings_clean <- dplyr::filter(title.ratings, !is.na(averageRating))
ggplot(df, aes(x = averageRating)) +
geom_histogram(binwidth = 0.25, color = "white", fill = "grey30", boundary = 0) +
scale_x_continuous(limits = c(0, 10), breaks = 0:10) +
labs(x = "Average rating", y = "Count", title = "Average Rating IMDb") +
theme_minimal(base_size = 14)
# checking outliers in averageRating - histogram
ratings_clean <- dplyr::filter(title.ratings, !is.na(averageRating))
ggplot(ratings_clean, aes(x = averageRating)) +
geom_histogram(binwidth = 0.25, color = "white", fill = "grey30", boundary = 0) +
scale_x_continuous(limits = c(0, 10), breaks = 0:10) +
labs(x = "Average rating", y = "Count", title = "Average Rating IMDb") +
theme_minimal(base_size = 14)
install.packages("checkmate")   # run once in the Console
library(checkmate)
# allow NAs, but every non-NA must be within [0, 10]
assert_numeric(
title.ratings$averageRating,
lower = 0, upper = 10,
any.missing = TRUE,  # NAs allowed
all.missing = FALSE  # not all NA
)
install.packages("checkmate")
# Filter for movies only
title.basics_clean <- title.basics %>%
filter(titleType == "movie") %>%
select(tconst, primaryTitle, startYear, runtimeMinutes) %>%
distinct(tconst, .keep_all = TRUE)
title.ratings_clean <- title.ratings %>%
mutate(
averageRating = to_na(averageRating),
numVotes      = to_na(numVotes)) %>%
mutate(averageRating = as.numeric(averageRating),
numVotes      = as.integer(numVotes)) %>%
select(tconst, averageRating, numVotes) %>%
distinct(tconst, .keep_all = TRUE)
count(data_final$movie)
count(data_final$movie, na.rm = TRUE)
library(dplyr)
title.basics %>%
count(titleType, sort = TRUE) %>%
mutate(pct = n / sum(n))
# Filter for movies only
title.basics_clean %>%
filter(titleType == "movie") %>%
select(tconst, primaryTitle, startYear, runtimeMinutes) %>%
distinct(tconst, .keep_all = TRUE)
# Filter for movies only
title.basics_clean %>%
filter(titleType == "movie") %>%
select(tconst, primaryTitle, startYear, runtimeMinutes) %>%
distinct(tconst, .keep_all = TRUE)
View(title.basics_clean)
library(dplyr)
title.basics %>%
count(titleType, sort = TRUE) %>%
mutate(pct = n / sum(n))
# Descriptive Statistics table:
data_final <- title.basics %>%
select(tconst, runtimeMinutes, startYear) %>%
mutate(
runtimeMinutes = suppressWarnings(as.numeric(runtimeMinutes)),
startYear      = suppressWarnings(as.integer(startYear))
) %>%
inner_join(
title.ratings %>% select(tconst, averageRating),
by = "tconst"
) %>%
mutate(averageRating = as.numeric(averageRating))
descriptives <- tibble(
Variable = c("runtimeMinutes","averageRating","startYear"),
N        = c(sum(!is.na(data_final$runtimeMinutes)),
sum(!is.na(data_final$averageRating)),
sum(!is.na(data_final$startYear))),
Missing  = c(sum(is.na(data_final$runtimeMinutes)),
sum(is.na(data_final$averageRating)),
sum(is.na(data_final$startYear))),
Mean     = c(mean(data_final$runtimeMinutes, na.rm = TRUE),
mean(data_final$averageRating,  na.rm = TRUE),
mean(data_final$startYear,      na.rm = TRUE)),
SD       = c(sd(data_final$runtimeMinutes, na.rm = TRUE),
sd(data_final$averageRating,  na.rm = TRUE),
sd(data_final$startYear,      na.rm = TRUE)),
Min      = c(min(data_final$runtimeMinutes, na.rm = TRUE),
min(data_final$averageRating,  na.rm = TRUE),
min(data_final$startYear,      na.rm = TRUE)),
Max      = c(max(data_final$runtimeMinutes, na.rm = TRUE),
max(data_final$averageRating,  na.rm = TRUE),
max(data_final$startYear,      na.rm = TRUE)))
descriptives %>%
gt() %>%
tab_header(title = "Table 2. Descriptive Statistics") %>%
tab_options(column_labels.font.weight="bold")
# Merging datasets
data_final <- title.basics %>%
select(tconst, runtimeMinutes, startYear) %>%
mutate(
runtimeMinutes = suppressWarnings(as.numeric(runtimeMinutes)),
startYear      = suppressWarnings(as.integer(startYear))
) %>%
inner_join(
title.ratings %>% select(tconst, averageRating),
by = "tconst"
) %>%
mutate(averageRating = as.numeric(averageRating))
# Descriptive Statistics table:
descriptives <- tibble(
Variable = c("runtimeMinutes","averageRating","startYear"),
N        = c(sum(!is.na(data_final$runtimeMinutes)),
sum(!is.na(data_final$averageRating)),
sum(!is.na(data_final$startYear))),
Missing  = c(sum(is.na(data_final$runtimeMinutes)),
sum(is.na(data_final$averageRating)),
sum(is.na(data_final$startYear))),
Mean     = c(mean(data_final$runtimeMinutes, na.rm = TRUE),
mean(data_final$averageRating,  na.rm = TRUE),
mean(data_final$startYear,      na.rm = TRUE)),
SD       = c(sd(data_final$runtimeMinutes, na.rm = TRUE),
sd(data_final$averageRating,  na.rm = TRUE),
sd(data_final$startYear,      na.rm = TRUE)),
Min      = c(min(data_final$runtimeMinutes, na.rm = TRUE),
min(data_final$averageRating,  na.rm = TRUE),
min(data_final$startYear,      na.rm = TRUE)),
Max      = c(max(data_final$runtimeMinutes, na.rm = TRUE),
max(data_final$averageRating,  na.rm = TRUE),
max(data_final$startYear,      na.rm = TRUE)))
descriptives %>%
gt() %>%
tab_header(title = "Table 2. Descriptive Statistics") %>%
tab_options(column_labels.font.weight="bold")
View(data_final)
View(data_final)
# Filter for movies only
title.basics_clean <- title.basics %>%
filter(titleType == "movie") %>%
select(tconst, primaryTitle, startYear, runtimeMinutes) %>%
distinct(tconst, .keep_all = TRUE)
title.ratings_clean <- title.ratings %>%
mutate(
averageRating = to_na(averageRating),
numVotes      = to_na(numVotes)) %>%
mutate(averageRating = as.numeric(averageRating),
numVotes      = as.integer(numVotes)) %>%
select(tconst, averageRating, numVotes) %>%
distinct(tconst, .keep_all = TRUE)
# Merging datasets
merged_data <- title.basics_clean %>%
select(tconst, runtimeMinutes, startYear) %>%
mutate(
runtimeMinutes = suppressWarnings(as.numeric(runtimeMinutes)),
startYear      = suppressWarnings(as.integer(startYear))
) %>%
inner_join(
title.ratings_clean %>% select(tconst, averageRating),
by = "tconst"
) %>%
mutate(averageRating = as.numeric(averageRating))
# Descriptive Statistics table:
descriptives <- tibble(
Variable = c("runtimeMinutes","averageRating","startYear"),
N        = c(sum(!is.na(merged_data$runtimeMinutes)),
sum(!is.na(merged_data$averageRating)),
sum(!is.na(merged_data$startYear))),
Missing  = c(sum(is.na(merged_data$runtimeMinutes)),
sum(is.na(merged_data$averageRating)),
sum(is.na(merged_data$startYear))),
Mean     = c(mean(merged_data$runtimeMinutes, na.rm = TRUE),
mean(merged_data$averageRating,  na.rm = TRUE),
mean(merged_data$startYear,      na.rm = TRUE)),
SD       = c(sd(merged_data$runtimeMinutes, na.rm = TRUE),
sd(merged_data$averageRating,  na.rm = TRUE),
sd(merged_data$startYear,      na.rm = TRUE)),
Min      = c(min(merged_data$runtimeMinutes, na.rm = TRUE),
min(merged_data$averageRating,  na.rm = TRUE),
min(merged_data$startYear,      na.rm = TRUE)),
Max      = c(max(merged_data$runtimeMinutes, na.rm = TRUE),
max(merged_data$averageRating,  na.rm = TRUE),
max(merged_data$startYear,      na.rm = TRUE)))
descriptives %>%
gt() %>%
tab_header(title = "Table 2. Descriptive Statistics") %>%
tab_options(column_labels.font.weight="bold")
View(merged_data)
# Merging datasets
merged_data <- title.basics_clean %>%
select(tconst, runtimeMinutes, startYear, primaryTitle) %>%
mutate(
runtimeMinutes = suppressWarnings(as.numeric(runtimeMinutes)),
startYear      = suppressWarnings(as.integer(startYear)),
primaryTitle = suppressWarnings(as.character(primaryTitle))
) %>%
inner_join(
title.ratings_clean %>% select(tconst, averageRating),
by = "tconst"
) %>%
mutate(averageRating = as.numeric(averageRating))
View(merged_data)
# Descriptive Statistics table:
descriptives <- tibble(
Variable = c("runtimeMinutes","averageRating","startYear"),
N        = c(sum(!is.na(merged_data$runtimeMinutes)),
sum(!is.na(merged_data$averageRating)),
sum(!is.na(merged_data$startYear))),
Missing  = c(sum(is.na(merged_data$runtimeMinutes)),
sum(is.na(merged_data$averageRating)),
sum(is.na(merged_data$startYear))),
Mean     = c(mean(merged_data$runtimeMinutes, na.rm = TRUE),
mean(merged_data$averageRating,  na.rm = TRUE),
mean(merged_data$startYear,      na.rm = TRUE)),
SD       = c(sd(merged_data$runtimeMinutes, na.rm = TRUE),
sd(merged_data$averageRating,  na.rm = TRUE),
sd(merged_data$startYear,      na.rm = TRUE)),
Min      = c(min(merged_data$runtimeMinutes, na.rm = TRUE),
min(merged_data$averageRating,  na.rm = TRUE),
min(merged_data$startYear,      na.rm = TRUE)),
Max      = c(max(merged_data$runtimeMinutes, na.rm = TRUE),
max(merged_data$averageRating,  na.rm = TRUE),
max(merged_data$startYear,      na.rm = TRUE)))
descriptives %>%
gt() %>%
tab_header(title = "Table 2. Descriptive Statistics") %>%
tab_options(column_labels.font.weight="bold")
View(title.ratings_clean)
# Merging datasets
merged_data <- title.basics_clean %>%
select(tconst, runtimeMinutes, startYear, primaryTitle) %>%
mutate(
runtimeMinutes = suppressWarnings(as.numeric(runtimeMinutes)),
startYear      = suppressWarnings(as.integer(startYear)),
primaryTitle = suppressWarnings(as.character(primaryTitle))
) %>%
inner_join(
title.ratings_clean %>% select(tconst, averageRating, numVotes),
by = "tconst"
) %>%
mutate(averageRating = as.numeric(averageRating))
# Merging datasets
merged_data <- title.basics_clean %>%
select(tconst, runtimeMinutes, startYear, primaryTitle) %>%
mutate(
runtimeMinutes = suppressWarnings(as.numeric(runtimeMinutes)),
startYear      = suppressWarnings(as.integer(startYear)),
primaryTitle = suppressWarnings(as.character(primaryTitle))
) %>%
inner_join(
title.ratings_clean %>% select(tconst, averageRating, numVotes),
by = "tconst"
) %>%
mutate(
averageRating = as.numeric(averageRating)),
# Merging datasets
merged_data <- title.basics_clean %>%
select(tconst, runtimeMinutes, startYear, primaryTitle) %>%
mutate(
runtimeMinutes = suppressWarnings(as.numeric(runtimeMinutes)),
startYear      = suppressWarnings(as.integer(startYear)),
primaryTitle = suppressWarnings(as.character(primaryTitle))
) %>%
inner_join(
title.ratings_clean %>% select(tconst, averageRating, numVotes),
by = "tconst"
) %>%
mutate(
averageRating = as.numeric(averageRating)),
# Merging datasets
merged_data <- title.basics_clean %>%
select(tconst, runtimeMinutes, startYear, primaryTitle) %>%
mutate(
runtimeMinutes = suppressWarnings(as.numeric(runtimeMinutes)),
startYear      = suppressWarnings(as.integer(startYear)),
primaryTitle = suppressWarnings(as.character(primaryTitle))
) %>%
inner_join(
title.ratings_clean %>% select(tconst, averageRating, numVotes),
by = "tconst"
) %>%
mutate(
averageRating = as.numeric(averageRating)),
# Merging datasets
merged_data <- title.basics_clean %>%
select(tconst, runtimeMinutes, startYear, primaryTitle) %>%
mutate(
runtimeMinutes = suppressWarnings(as.numeric(runtimeMinutes)),
startYear      = suppressWarnings(as.integer(startYear)),
primaryTitle = suppressWarnings(as.character(primaryTitle))
) %>%
inner_join(
title.ratings_clean %>% select(tconst, averageRating, numVotes),
by = "tconst"
) %>%
mutate(
averageRating = as.numeric(averageRating),
numVotes= as.integer(numVotes)
)
View(merged_data)
# Descriptive Statistics table:
descriptives <- tibble(
Variable = c("runtimeMinutes","averageRating","startYear"),
N        = c(sum(!is.na(merged_data$runtimeMinutes)),
sum(!is.na(merged_data$averageRating)),
sum(!is.na(merged_data$startYear))),
Missing  = c(sum(is.na(merged_data$runtimeMinutes)),
sum(is.na(merged_data$averageRating)),
sum(is.na(merged_data$startYear))),
Mean     = c(mean(merged_data$runtimeMinutes, na.rm = TRUE),
mean(merged_data$averageRating,  na.rm = TRUE),
mean(merged_data$startYear,      na.rm = TRUE)),
SD       = c(sd(merged_data$runtimeMinutes, na.rm = TRUE),
sd(merged_data$averageRating,  na.rm = TRUE),
sd(merged_data$startYear,      na.rm = TRUE)),
Min      = c(min(merged_data$runtimeMinutes, na.rm = TRUE),
min(merged_data$averageRating,  na.rm = TRUE),
min(merged_data$startYear,      na.rm = TRUE)),
Max      = c(max(merged_data$runtimeMinutes, na.rm = TRUE),
max(merged_data$averageRating,  na.rm = TRUE),
max(merged_data$startYear,      na.rm = TRUE)))
descriptives %>%
gt() %>%
tab_header(title = "Table 2. Descriptive Statistics") %>%
tab_options(column_labels.font.weight="bold")
# Set filter data and movie duration & deleting NA
current_year <- 2025
max_runtime  <- 300
movies_final <- merged_data %>%
inner_join(merged_data, by = "tconst") %>%
rename(
title           = primaryTitle,
start_year      = startYear,
runtime_minutes = runtimeMinutes,
average_rating  = averageRating,
votes           = numVotes)
# Set filter data and movie duration & deleting NA
current_year <- 2025
max_runtime  <- 300
movies_final <- merged_data %>%
inner_join(merged_data, by = "tconst") %>%
rename(
title           = primaryTitle,
start_year      = startYear,
runtime_minutes = runtimeMinutes,
average_rating  = averageRating,
votes           = numVotes
)
# Set filter data and movie duration & deleting NA
current_year <- 2025
max_runtime  <- 300
movies_final <- merged_data %>%
inner_join(merged_data, by = "tconst") %>%
filter(runtimeMinutes > 0,
runtimeMinutes <= max_runtime) %>%
filter(startYear <= current_year) %>%
rename(
title           = primaryTitle,
start_year      = startYear,
runtime_minutes = runtimeMinutes,
average_rating  = averageRating,
votes           = numVotes
)
# Set filter data and movie duration & deleting NA
current_year <- 2025
max_runtime  <- 300
movies_final <- merged_data %>%
filter(runtimeMinutes > 0,
runtimeMinutes <= max_runtime) %>%
filter(startYear <= current_year) %>%
rename(
title           = primaryTitle,
start_year      = startYear,
runtime_minutes = runtimeMinutes,
average_rating  = averageRating,
votes           = numVotes
)
View(movies_final)
# Checking the duplicated data
library(dplyr)
keys <- c("title", "start_year", "runtime_minutes")
movies_final %>% as_tibble()
sum( duplicated(select(movies_final, all_of(keys))) )
dups_rows <- movies_final %>%
mutate(.is_dup = duplicated(select(., all_of(keys))) |
duplicated(select(., all_of(keys)), fromLast = TRUE)) %>%
filter(.is_dup) %>%
select(-.is_dup)
dup_groups <- movies_final %>%
count(across(all_of(keys)), sort = TRUE) %>%
filter(n > 1)
dups_rows %>% slice_head(n = 40)
dup_groups %>% slice_head(n = 20)
# Dropping duplicated data
movies_final_clean <- movies_final %>%
group_by(across(all_of(keys))) %>%
slice_max(votes, with_ties = FALSE) %>%
ungroup()
# How many rows were removed?
dropped <- nrow(movies_final) - nrow(movies_final_clean)
dropped
# Sanity check: no duplicates remain
stopifnot(!any(duplicated(select(movies_final_clean, all_of(keys)))))
# Handling missing data
filter(!is.na(runtimeMinutes),
!is.na(averageRating),
!is.na(startYear)) %>%
filter(runtimeMinutes > 0,
runtimeMinutes <= max_runtime) %>%
filter(startYear <= current_year) %>%
# Handling missing data
filter(!is.na(runtimeMinutes),
!is.na(averageRating),
!is.na(startYear)) %>%
# Handling missing data
movies_final %>%
filter(!is.na(runtimeMinutes),
!is.na(averageRating),
!is.na(startYear))
# Handling missing data
movies_final %>%
filter(!is.na(runtime_minutes),
!is.na(averageRating),
!is.na(startYear))
# Handling missing data
movies_final %>%
filter(!is.na(runtime_minutes),
!is.na(average_rating),
!is.na(start_year))
# Handling missing data
movies_final %>%
filter(!is.na(runtime_minutes),
!is.na(average_rating),
!is.na(start_year),
!is.na(title))
# Handling missing data
movies_final_no_na <- movies_final %>%
filter(!is.na(runtime_minutes),
!is.na(average_rating),
!is.na(start_year),
!is.na(title))
# Checking the duplicated data
library(dplyr)
keys <- c("title", "start_year", "runtime_minutes")
movies_final %>% as_tibble()
sum( duplicated(select(movies_final, all_of(keys))) )
dups_rows <- movies_final %>%
mutate(.is_dup = duplicated(select(., all_of(keys))) |
duplicated(select(., all_of(keys)), fromLast = TRUE)) %>%
filter(.is_dup) %>%
select(-.is_dup)
dup_groups <- movies_final %>%
count(across(all_of(keys)), sort = TRUE) %>%
filter(n > 1)
dups_rows %>% slice_head(n = 80)
dup_groups %>% slice_head(n = 40)
# drop NA in those columns
movies_final_no_na <- tidyr::drop_na(movies_final, runtime_minutes, average_rating, start_year, title)
# or
movies_final_no_na <- movies_final %>%
filter(!if_any(c(runtime_minutes, average_rating, start_year, title), is.na))
View(movies_final_no_na)
n_removed <- nrow(movies_final) - nrow(movies_final_no_na)
n_removed
